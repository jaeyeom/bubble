%{
	
#include <string>
#include <iostream>
#include "bubbleLexer.hpp"
#include "token.hpp"
#include "parseTree.hpp"

#define YYDEBUG 	1

extern int lineno;
extern Bubble::ParseTreeNode<Bubble::Token>* root_node;
	
%}

%union
{
	int ival;
	float fval;
	std::string *sval;
	std::string *id;
        Bubble::ParseTreeNode<Bubble::Token>* token;
}

%token ERROR_TOKEN
%token IF ELSE
%token WHILE
%token BEG END

%token COMMA COLON LPAREN RPAREN LBRACKET RBRACKET NL
%token PLUS MINUS STAR DIV AND OR NOT
%token ASSIGN GTH GEQ LTH LEQ EQ NEQ

%token <ival> INT_VAL
%token <fval> DOUBLE_VAL
%token <sval> STRING_VAL
%token <id> ID

%type <token> bubble declare_stmt function_definition block_stmt stmts
%type <token> stmt expr_stmt while_stmt if_stmt 
%type <token> expr assign_expr rhs_expr array_expr or_expr and_expr equality_expr cmp_expr
%type <token> add_expr mul_expr unary_expr postfix_expr function_call rhs_expr_list primary_expr id_list
%%
%start bubble;

bubble
	: declare_stmt
	| bubble declare_stmt
	;

declare_stmt
	: NL 
	| function_definition 
	;

function_definition
	: ID LPAREN id_list RPAREN NL block_stmt
	| ID LPAREN RPAREN NL block_stmt
	;

block_stmt
	: BEG NL stmts END NL
	;

stmts
	: stmt 
	| stmts stmt 
	;

stmt
	: expr_stmt NL
	| while_stmt 
	| if_stmt 
	| block_stmt 
	;

expr_stmt
	: 
	| expr
	;
	
while_stmt 
	: WHILE expr NL block_stmt
	;

if_stmt
	: IF expr NL block_stmt 
	| IF expr NL block_stmt ELSE NL block_stmt
	;

expr
	: assign_expr
	;

assign_expr
	: rhs_expr 
	| unary_expr ASSIGN rhs_expr
	;

rhs_expr
	: or_expr
	| array_expr
	;

array_expr
	: LBRACKET rhs_expr_list RBRACKET
	;

or_expr
	: and_expr
	| or_expr OR and_expr
	;

and_expr
	: equality_expr
	| and_expr AND equality_expr
	;

equality_expr
	: cmp_expr
	| equality_expr EQ cmp_expr
	| equality_expr NEQ cmp_expr
	;

cmp_expr
	: add_expr
	| cmp_expr LEQ add_expr
	| cmp_expr LTH add_expr
	| cmp_expr GEQ add_expr
	| cmp_expr GTH add_expr
	;

add_expr
	: mul_expr
	| add_expr PLUS mul_expr
	| add_expr MINUS mul_expr
	;

mul_expr
	: unary_expr
	| mul_expr STAR unary_expr
	| mul_expr DIV unary_expr
	;

unary_expr
	: postfix_expr
	| MINUS unary_expr
	| PLUS unary_expr
	| NOT unary_expr
	;

postfix_expr
	: primary_expr
	| postfix_expr LBRACKET expr RBRACKET
	| function_call
	;

function_call
	: ID LPAREN RPAREN
	| ID LPAREN rhs_expr_list RPAREN
	;

rhs_expr_list
	: rhs_expr
	| rhs_expr_list COMMA rhs_expr
	;
	
primary_expr
	: ID
	| INT_VAL
	| DOUBLE_VAL
	| STRING_VAL
	;

id_list
	: ID
	| id_list COMMA ID
	;

%%

